
#
# CBRAIN Project
#
# Copyright (C) 2008-2012
# The Royal Institution for the Advancement of Learning
# McGill University
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
#

# Model for BIDS datasets.
class BidsDataset < FileCollection

  Revision_info=CbrainFileRevision[__FILE__] #:nodoc:

  has_viewer :name => "BIDS Validator",  :partial => :bids_validator

  def self.pretty_type #:nodoc:
    "BIDS dataset"
  end

  def self.file_name_pattern #:nodoc:
    /\.bids$/i
  end

  # This method is meant to be as compatible as possible
  # to the FmriStudy API; NYI: any options!
  def list_subjects(options = {})
    all_subjects
  end

  # This method is meant to be as compatible as possible
  # to the FmriStudy API; NYI: any options!
  def list_sessions(options = {})
    all_sessions
  end

  private

  def all_subjects #:nodoc:
    @_subjects ||= cache_list_in_metadata('subjects') do
      list_files(:top, :directory)
        .map    { |e| Pathname.new(e.name).basename.to_s }
        .select { |n| n =~ /^sub-/ }
        .map    { |n| n[4,999] } # I hope no subject is longer than that!
    end
  end

  def all_sessions #:nodoc:
    @_sessions ||= all_subjects.inject([]) do |final,sub|
      final |= sessions_for_subject(sub)
    end
  end

  def sessions_for_subject(sub) #:nodoc:
    @_sessions_for_subject      ||= {}
    @_sessions_for_subject[sub] ||=
      list_files("sub-#{sub}", :directory)
      .map    { |e| Pathname.new(e.name).basename.to_s }
      .select { |n| n =~ /^ses-/ }
      .map    { |n| n[4,999] } # Also I hope no session is longer than that.
  end

  # This clumsy method will cache a large array of identifiers
  # in the metadata of the bids dataset object. The identifiers
  # are expected to be generated by the given block. The array
  # will be split in chunks of 500 and stored in consecutive
  # meta keys formated like +key_list_0+, +key_list_1+ etc (where
  # +key+ is the first argument). Two other meta key tracks
  # the cache: +key_updated_at+ (a timestamp, compared to the
  # bids dataset's updated_at attribute) and +key_num_sublists+
  # (which is one higher than N in the last +key_list_N+).
  def cache_list_in_metadata(key) #:nodoc:
    datekey           = "#{key}_updated_at"
    sublist_count_key = "#{key}_num_sublists"

    # Find cached values in metadata if present
    if meta[datekey].present? && meta[datekey] > updated_at() && meta[sublist_count_key].present?
      final_list = []
      meta[sublist_count_key].times do |i|
        sublist = meta["#{key}_list_#{i}"] || []
        final_list += sublist
      end
      return final_list
    end

    # Build list instead
    final_list = yield

    # Cache in meta data
    final_slice = 0
    final_list.each_slice(500).each_with_index do |slice,i|
      meta["#{key}_list_#{i}"] = slice
      final_slice = i
    end
    meta[sublist_count_key] = final_slice + 1
    meta[datekey]           = Time.now

    final_list
  end

end
